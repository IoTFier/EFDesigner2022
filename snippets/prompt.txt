You're tasked with creating a visually-pleasing UML class diagram. You're given an array of C# objects representing nodes in a graph. They are defined as 

   public class Node: IDisposable
   {
      // list of references to connected nodes (children)
      private readonly List<Node> _connections;

      /// <summary>
      ///    List of references to connected nodes (children)
      /// </summary>
      public IList<Node> Connections
      {
         get => _connections.AsReadOnly();
      }

      /// <summary>
      ///    Gets or sets the position of the node.
      /// </summary>
      public Point Location { get; set; }

      /// <summary>
      ///    Gets the size of the node (for drawing purposes).
      /// </summary>
      public Size Size { get; }

      /// <summary>
      ///    Gets the X coordinate of the node, relative to the origin.
      /// </summary>
      public int X
      {
         get { return Location.X; }
      }

      /// <summary>
      ///    Gets the Y coordinate of the node, relative to the origin.
      /// </summary>
      public int Y
      {
         get { return Location.Y; }
      }

      /// <summary>
      ///    Connects the specified child node to this node.
      /// </summary>
      /// <param name="child">The child node to add.</param>
      /// <returns>True if the node was connected to this node.</returns>
      public bool AddChild( Node child )
      {
         if (child == null)
            throw new ArgumentNullException( nameof( child ) );

         if (child != this && !_connections.Contains( child ))
         {
            _connections.Add( child );
            return true;
         }

         return false;
      }

      /// <summary>
      ///    Connects this node to the specified parent node.
      /// </summary>
      /// <param name="parent">The node to connect to this node.</param>
      /// <returns>True if the other node was connected to this node.</returns>
      public bool AddParent( Node parent )
      {
         if (parent == null)
            throw new ArgumentNullException( nameof( parent ) );
         return parent.AddChild( this );
      }

      /// <summary>
      ///    Removes any connection between this node and the specified node.
      /// </summary>
      /// <param name="other">The other node whose connection is to be removed.</param>
      /// <returns>True if a connection existed.</returns>
      public bool Disconnect( Node other )
      {
         bool c = _connections.Remove( other );
         bool p = other._connections.Remove( this );
         return c || p;
      }

      public void Dispose()
	  {
	     mStroke.Dispose();
	     mFill.Dispose();
	     GC.SuppressFinalize( this );
	  }
	  
      public Node()
      {
         Location = Point.Empty;
         _connections = new List<Node>();
      }
   }

Edge lines are defined as

public class Edge
{
   public Node Source { get; set; }
   public Node Destination { get; set; }
   public List<LineSegment> Segments { get; } = new List<LineSegment>();
}

public class LineSegment
{
   public int BeginX { get; set; }
   public int BeginY { get; set; }
   public int EndX { get; set; }
   public int EndY { get; set; }
}

Edge lines connect to Nodes at the border of the Node, either horizontal or vertical.

Use the principles in https://i11www.iti.kit.edu/_media/teaching/theses/ma-reichard-16.pdf to minimize rectilinear crossing.

Implement the Layout(IEnumerable<Node>) method in C# to layout the design surface using a force-directed graph so that no Node objects overlap and the edge lines do not cross Nodes or other lines, if at all possible. Assume that Edge.Segments starts as an empty list and add whatever values are needed. 

You may not modify the height of a Node, but you may modify the width if necessary to create a pleasing diagram.
