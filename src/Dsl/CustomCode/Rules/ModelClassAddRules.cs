using System.Diagnostics;
using System.Linq;

using Microsoft.VisualStudio.Modeling;

using Sawczyn.EFDesigner.EFModel.Extensions;

namespace Sawczyn.EFDesigner.EFModel
{
   [RuleOn(typeof( ModelClass ), FireTime = TimeToFire.TopLevelCommit)]
   internal class ModelClassAddRules : AddRule
   {
      internal bool isAdding = false;

      public override void ElementAdded(ElementAddedEventArgs e)
      {
         base.ElementAdded(e);

         ModelClass element = (ModelClass)e.ModelElement;

         Store store = element.Store;
         Transaction current = store.TransactionManager.CurrentTransaction;
         ModelRoot modelRoot = store.ModelRoot();

         if (current.IsSerializing || ModelRoot.BatchUpdating)
            return;

         // there could already be an identity property if this class was created via Paste or import
         // also, don't add columns to views or query types
         // NB: don't do anything if we're in an owned type
         Trace.WriteLine($"ModelClassAddRules::ElementAdded: {element.Name}: element.AllIdentityAttributes.Any() = {element.AllIdentityAttributes.Any()}, element.IsDependentType = {element.IsDependentType}, element.IsKeylessType() =  {element.IsQueryType || element.IsDatabaseView}, (element.IsDependentType || element.IsKeylessType()) = {element.IsDependentType || (element.IsQueryType || element.IsDatabaseView)}");

         if (!element.AllIdentityAttributes.Any() && !element.IsDependentType && !element.IsQueryType && !element.IsDatabaseView)
         {
            // there could also be a property named "Id"
            ModelAttribute idProperty = element.AllAttributes.FirstOrDefault(a => a.Name == "Id");

            if (idProperty != null)
               idProperty.IsIdentity = true;
            else
            {
               ModelAttribute newAttribute = new ModelAttribute(element.Partition)
                                             {
                                                Name = "Id"
                                              , Type = modelRoot.DefaultIdentityType
                                              , IsIdentity = true
                                              , IdentityType = IdentityType.AutoGenerated
                                              , Summary = "Unique identifier"
                                             };

               element.Attributes.Add(newAttribute);
            }
         }

         if ((modelRoot.ConcurrencyDefault == Concurrency.Optimistic) && !element.AllAttributes.Any(x => x.IsConcurrencyToken))
         {
            ModelAttribute concurrencyToken = new ModelAttribute(element.Partition)
                                              {
                                                 Name = "Timestamp"
                                               , Type = "Binary"
                                               , IsConcurrencyToken = true
                                               , Summary = "Concurrency token"
                                              };

            element.Attributes.Add(concurrencyToken);
         }

         element.DbSetName = element.GetDefaultDbSetName(element.ModelRoot.PluralizeDbSetNames);
         element.TableName = element.GetDefaultTableName(element.ModelRoot.PluralizeTableNames);

         if (modelRoot.ReservedWords.Contains(element.Name))
            element.Name = "@" + element.Name;
      }
   }
}
