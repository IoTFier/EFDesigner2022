//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.2.3.2
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Credit.API.Domain_RE.Models_RE
{
   /// <inheritdoc/>
   public partial class CreditContext : DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.AddressInformations> AddressInformations { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Attributes> Attributes { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses> ConsumerAssistanceReferralAddresses { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities> ConsumerIdentities { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.CreditProfiles> CreditProfiles { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo> CreditReportInfoes { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.DirectChecks> DirectChecks { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Dobs> Dobs { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations> EmploymentInformations { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas> EnhancedPaymentDatas { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.FraudShieldIndicators> FraudShieldIndicators { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.FraudShields> FraudShields { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.InformationalMessages> InformationalMessages { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Inquiries> Inquiries { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Items> Items { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Mlas> Mlas { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.ModelAttribute> ModelAttributes { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.ModelAttributes> ModelAttributesSet { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Names> Names { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Ofacs> Ofacs { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Phones> Phones { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.PublicRecords> PublicRecords { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.RiskModels> RiskModels { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.ScoreFactors> ScoreFactors { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Ssns> Ssns { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Statements> Statements { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.Summaries> Summaries { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines> TrendedTradeLines { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.TrendedTrades> TrendedTrades { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Credit.API.Domain_RE.Models_RE.UniqueConsumerIdentifiers> UniqueConsumerIdentifiers { get; set; }

      #endregion DbSets

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=(LocalDb)\MSSQLLocalDb;Initial Catalog=Testing;Integrated Security=True";

      /// <summary>
      ///     <para>
      ///         Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> class using the specified options.
      ///         The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be called to allow further
      ///         configuration of the options.
      ///     </para>
      /// </summary>
      /// <param name="options">The options for this context.</param>
      public CreditContext(DbContextOptions<CreditContext> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <summary>
      ///     Override this method to further configure the model that was discovered by convention from the entity types
      ///     exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
      ///     and re-used for subsequent instances of your derived context.
      /// </summary>
      /// <remarks>
      ///     If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
      ///     then this method will not be run.
      /// </remarks>
      /// <param name="modelBuilder">
      ///     The builder being used to construct the model for this context. Databases (and other extensions) typically
      ///     define extension methods on this object that allow you to configure aspects of the model that are specific
      ///     to a given database.
      /// </param>
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .ToTable("AddressInformations")
                     .HasKey(t => t.AddressInformationId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.AddressInformationId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.CensusGeoCode)
                     .HasMaxLength(15);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.City)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.CountyCode)
                     .HasMaxLength(15);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.DwellingType)
                     .HasMaxLength(5);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.FirstReportedDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.LastReportingSubscriberCode)
                     .HasMaxLength(15);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.LastUpdatedDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.MsaCode)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.Source)
                     .HasMaxLength(5);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.State)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.StateCode)
                     .HasMaxLength(25);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.StreetName)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.StreetPrefix)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.StreetSuffix)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.TimesReported)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.UnitId)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.UnitType)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .Property(t => t.Zipcode)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.AddressInformations>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>(p => p.CreditProfile)
                     .WithMany(p => p.AddressInformations);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Attributes>()
                     .ToTable("Attributes")
                     .HasKey(t => t.AttributesId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Attributes>()
                     .Property(t => t.AttributesId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Attributes>()
                     .Property(t => t.Id)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Attributes>()
                     .Property(t => t.SummariesId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Attributes>().HasIndex(t => t.SummariesId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Attributes>()
                     .Property(t => t.Value)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Attributes>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.Summaries>(p => p.Summaries)
                     .WithMany(p => p.Attributes);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>()
                     .ToTable("ConsumerAssistanceReferralAddresses")
                     .HasKey(t => t.ConsumerAssistanceReferralAddressId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>()
                     .Property(t => t.ConsumerAssistanceReferralAddressId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>()
                     .Property(t => t.CityStateZip)
                     .HasMaxLength(500);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>()
                     .Property(t => t.OfficeName)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>()
                     .Property(t => t.Phone)
                     .HasMaxLength(20);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>()
                     .Property(t => t.Pobox)
                     .HasMaxLength(25);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>()
                     .Property(t => t.StreetName)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>(p => p.CreditProfile)
                     .WithOne(p => p.ConsumerAssistanceReferralAddresses)
                     .HasForeignKey<global::Credit.API.Domain_RE.Models_RE.ConsumerAssistanceReferralAddresses>(k => k.CreditProfileId);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>()
                     .ToTable("ConsumerIdentities")
                     .HasKey(t => t.ConsumerIdentityId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>()
                     .Property(t => t.ConsumerIdentityId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>(p => p.CreditProfile)
                     .WithOne(p => p.ConsumerIdentities)
                     .HasForeignKey<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>(k => k.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.Dobs>(p => p.Dobs)
                     .WithOne(p => p.ConsumerIdentity)
                     .HasForeignKey<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>(k => k.ConsumerIdentityId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.Names>(p => p.Names)
                     .WithOne(p => p.ConsumerIdentity)
                     .HasForeignKey(k => k.ConsumerIdentityId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ConsumerIdentities>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.Phones>(p => p.Phones)
                     .WithOne(p => p.ConsumerIdentity)
                     .HasForeignKey(k => k.ConsumerIdentityId)
                     .IsRequired();

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .ToTable("CreditProfiles")
                     .HasKey(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .Property(t => t.CreditProfileId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .Property(t => t.CreatedBy)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .Property(t => t.CreatedOn)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .Property(t => t.FirstNameUsedToCreateRecord)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .Property(t => t.LastAccessedBy)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .Property(t => t.LastAccessedOn)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .Property(t => t.LastNameUsedToCreateRecord)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .Property(t => t.LastPulledOn)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .Property(t => t.SsnUsedToCreateRecord)
                     .HasMaxLength(9);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.DirectChecks>(p => p.DirectChecks)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>(p => p.EmploymentInformations)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.FraudShields>(p => p.FraudShields)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.InformationalMessages>(p => p.InformationalMessages)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.Inquiries>(p => p.Inquiries)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.Mlas>(p => p.Mlas)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>(k => k.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.ModelAttribute>(p => p.ModelAttribute)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>(k => k.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.Ofacs>(p => p.Ofacs)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>(k => k.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.PublicRecords>(p => p.PublicRecords)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.RiskModels>(p => p.RiskModels)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.Ssns>(p => p.Ssns)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.Statements>(p => p.Statements)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.Summaries>(p => p.Summaries)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>(p => p.TrendedTradeLines)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey(k => k.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.UniqueConsumerIdentifiers>(p => p.UniqueConsumerIdentifiers)
                     .WithOne(p => p.CreditProfile)
                     .HasForeignKey<global::Credit.API.Domain_RE.Models_RE.CreditProfiles>(k => k.CreditProfileId);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .ToView("credit_report_info")
                     .HasNoKey();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.AccountType)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.AcctNumber)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.Amount1)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.BalanceAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.BalanceDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.Day)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.Ecoa)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.FirstNameUsedToCreateRecord)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.LastNameUsedToCreateRecord)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.LastPaymentDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.Month)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.MonthlyPaymentAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.OpenDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.OpenOrClosed)
                     .HasMaxLength(1);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.Score)
                     .HasMaxLength(6);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.Status)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.SubscriberName)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.CreditReportInfo>()
                     .Property(t => t.Year)
                     .HasMaxLength(4);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .ToTable("DirectChecks")
                     .HasKey(t => t.DirectCheckId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .Property(t => t.DirectCheckId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .Property(t => t.SubscriberAddress)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .Property(t => t.SubscriberCity)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .Property(t => t.SubscriberCode)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .Property(t => t.SubscriberName)
                     .HasMaxLength(250);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .Property(t => t.SubscriberPhone)
                     .HasMaxLength(15);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .Property(t => t.SubscriberState)
                     .HasMaxLength(25);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.DirectChecks>()
                     .Property(t => t.SubscriberZipCode)
                     .HasMaxLength(15);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Dobs>()
                     .ToTable("Dobs")
                     .HasKey(t => t.DobId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Dobs>()
                     .Property(t => t.DobId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Dobs>()
                     .Property(t => t.ConsumerIdentityId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Dobs>().HasIndex(t => t.ConsumerIdentityId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Dobs>()
                     .Property(t => t.Day)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Dobs>()
                     .Property(t => t.Month)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Dobs>()
                     .Property(t => t.Year)
                     .HasMaxLength(4);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .ToTable("EmploymentInformations")
                     .HasKey(t => t.EmploymentInformationId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.EmploymentInformationId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.AddressExtraLine)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.AddressFirstLine)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.AddressSecondLine)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.FirstReportedDate)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.LastUpdatedDate)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.Name)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.Source)
                     .HasMaxLength(5);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EmploymentInformations>()
                     .Property(t => t.Zipcode)
                     .HasMaxLength(15);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .ToTable("EnhancedPaymentDatas")
                     .HasKey(t => t.EnhancedPaymentDataId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.EnhancedPaymentDataId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.ActualPaymentAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.ChargeOffAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.CiiCode)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.ComplianceCondition)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.CreditLimitAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.EnhancedAccountCondition)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.EnhancedAccountType)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.EnhancedPaymentHistory84)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.EnhancedPaymentStatus)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.EnhancedSpecialComment)
                     .HasMaxLength(500);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.EnhancedTerms)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.EnhancedTermsFrequency)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.FirstDelinquencyDate)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.HighBalanceAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.MaxDelinquencyCode)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.MortgageId)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.OriginalCreditorClassificationCode)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.OriginalLoanAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.PaymentLevelDate)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.PurchasedPortfolioFromName)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.SecondDelinquencyDate)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.SecondaryAgencyCode)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.SecondaryAgencyId)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.SpecialPaymentAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.SpecialPaymentCode)
                     .HasMaxLength(5);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.SpecialPaymentDate)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .Property(t => t.TrendedTradeLineId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>().HasIndex(t => t.TrendedTradeLineId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>(p => p.TrendedTradeLine)
                     .WithOne(p => p.EnhancedPaymentDatas)
                     .HasForeignKey<global::Credit.API.Domain_RE.Models_RE.EnhancedPaymentDatas>(k => k.TrendedTradeLineId);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShieldIndicators>()
                     .ToTable("FraudShieldIndicators")
                     .HasKey(t => t.FraudShieldIndicatorsId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShieldIndicators>()
                     .Property(t => t.FraudShieldIndicatorsId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShieldIndicators>()
                     .Property(t => t.FraudShieldId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShieldIndicators>().HasIndex(t => t.FraudShieldId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShieldIndicators>()
                     .HasOne<global::Credit.API.Domain_RE.Models_RE.FraudShields>(p => p.FraudShield)
                     .WithOne(p => p.FraudShieldIndicators)
                     .HasForeignKey<global::Credit.API.Domain_RE.Models_RE.FraudShieldIndicators>(k => k.FraudShieldId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShieldIndicators>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.Items>(p => p.Items)
                     .WithOne(p => p.FraudShieldIndicators)
                     .HasForeignKey(k => k.FraudShieldIndicatorsId)
                     .IsRequired();

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .ToTable("FraudShields")
                     .HasKey(t => t.FraudShieldId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.FraudShieldId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.AddressCount)
                     .HasMaxLength(6);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.AddressDate)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.AddressErrorCode)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.DateOfBirth)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.DateOfDeath)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.Sic)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.SocialCount)
                     .HasMaxLength(5);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.SocialDate)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.SocialErrorCode)
                     .HasMaxLength(5);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.SsnFirstPossibleIssuanceYear)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.SsnLastPossibleIssuanceYear)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.Text)
                     .HasMaxLength(150);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.FraudShields>()
                     .Property(t => t.Type)
                     .HasMaxLength(4);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.InformationalMessages>()
                     .ToTable("InformationalMessages")
                     .HasKey(t => t.InformationalMessageId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.InformationalMessages>()
                     .Property(t => t.InformationalMessageId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.InformationalMessages>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.InformationalMessages>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.InformationalMessages>()
                     .Property(t => t.MessageNumber)
                     .HasMaxLength(6);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.InformationalMessages>()
                     .Property(t => t.MessageNumberDetailed)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.InformationalMessages>()
                     .Property(t => t.MessageText)
                     .HasMaxLength(100);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .ToTable("Inquiries")
                     .HasKey(t => t.InquiryId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .Property(t => t.InquiryId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .Property(t => t.Amount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .Property(t => t.Date)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .Property(t => t.Kob)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .Property(t => t.SubscriberCode)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .Property(t => t.SubscriberName)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .Property(t => t.Terms)
                     .HasMaxLength(5);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Inquiries>()
                     .Property(t => t.Type)
                     .HasMaxLength(5);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Items>()
                     .ToTable("Items")
                     .HasKey(t => t.ItemId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Items>()
                     .Property(t => t.ItemId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Items>()
                     .Property(t => t.FraudShieldIndicatorsId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Items>().HasIndex(t => t.FraudShieldIndicatorsId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Items>()
                     .Property(t => t.Items1)
                     .HasMaxLength(500);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Mlas>()
                     .ToTable("Mlas")
                     .HasKey(t => t.MlaId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Mlas>()
                     .Property(t => t.MlaId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Mlas>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Mlas>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Mlas>()
                     .Property(t => t.MessageNumber)
                     .HasMaxLength(6);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Mlas>()
                     .Property(t => t.MessageText)
                     .HasMaxLength(100);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttribute>()
                     .ToTable("ModelAttribute")
                     .HasKey(t => t.ModelAttributeId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttribute>()
                     .Property(t => t.ModelAttributeId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttribute>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttribute>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttribute>()
                     .Property(t => t.Message)
                     .HasMaxLength(500);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttribute>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.ModelAttributes>(p => p.ModelAttributes)
                     .WithOne(p => p.ModelAttribute)
                     .HasForeignKey(k => k.ModelAttributeId)
                     .IsRequired();

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttributes>()
                     .ToTable("ModelAttributes")
                     .HasKey(t => t.ModelAttributesId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttributes>()
                     .Property(t => t.ModelAttributesId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttributes>()
                     .Property(t => t.AttributeValue)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttributes>()
                     .Property(t => t.ModelAttributeId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttributes>().HasIndex(t => t.ModelAttributeId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttributes>()
                     .Property(t => t.ModelTypeIndicator)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttributes>()
                     .Property(t => t.SignOfAttribute)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ModelAttributes>()
                     .Property(t => t.VariableName)
                     .HasMaxLength(100);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>()
                     .ToTable("Names")
                     .HasKey(t => t.NameId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>()
                     .Property(t => t.NameId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>()
                     .Property(t => t.ConsumerIdentityId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>().HasIndex(t => t.ConsumerIdentityId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>()
                     .Property(t => t.FirstName)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>()
                     .Property(t => t.GenerationCode)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>()
                     .Property(t => t.MiddleName)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>()
                     .Property(t => t.SecondSurname)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>()
                     .Property(t => t.Surname)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Names>()
                     .Property(t => t.Type)
                     .HasMaxLength(10);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ofacs>()
                     .ToTable("Ofacs")
                     .HasKey(t => t.OfacId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ofacs>()
                     .Property(t => t.OfacId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ofacs>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ofacs>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ofacs>()
                     .Property(t => t.MessageNumber)
                     .HasMaxLength(6);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ofacs>()
                     .Property(t => t.MessageText)
                     .HasMaxLength(100);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Phones>()
                     .ToTable("Phones")
                     .HasKey(t => t.PhoneId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Phones>()
                     .Property(t => t.PhoneId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Phones>()
                     .Property(t => t.ConsumerIdentityId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Phones>().HasIndex(t => t.ConsumerIdentityId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Phones>()
                     .Property(t => t.Number)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Phones>()
                     .Property(t => t.Source)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Phones>()
                     .Property(t => t.Type)
                     .HasMaxLength(50);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .ToTable("PublicRecords")
                     .HasKey(t => t.PublicRecordId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.PublicRecordId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.AdjustmentPercent)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.Amount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.BankruptcyVoluntaryIndicator)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.BookPageSequence)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.ConsumerComment)
                     .HasMaxLength(500);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.CourtCode)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.CourtName)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.DisputeFlag)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.Ecoa)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.Evaluation)
                     .HasMaxLength(5);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.FilingDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.PlaintiffName)
                     .HasMaxLength(250);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.ReferenceNumber)
                     .HasMaxLength(30);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.RepaymentPercent)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.Status)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.PublicRecords>()
                     .Property(t => t.StatusDate)
                     .HasMaxLength(10);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.RiskModels>()
                     .ToTable("RiskModels")
                     .HasKey(t => t.RiskModelId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.RiskModels>()
                     .Property(t => t.RiskModelId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.RiskModels>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.RiskModels>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.RiskModels>()
                     .Property(t => t.Evaluation)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.RiskModels>()
                     .Property(t => t.ModelIndicator)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.RiskModels>()
                     .Property(t => t.Score)
                     .HasMaxLength(6);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.RiskModels>()
                     .Property(t => t.ScorePercentile)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.RiskModels>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.ScoreFactors>(p => p.ScoreFactors)
                     .WithOne(p => p.RiskModel)
                     .HasForeignKey(k => k.RiskModelId)
                     .IsRequired();

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ScoreFactors>()
                     .ToTable("ScoreFactors")
                     .HasKey(t => t.ScoreFactorsId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ScoreFactors>()
                     .Property(t => t.ScoreFactorsId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ScoreFactors>()
                     .Property(t => t.Code)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ScoreFactors>()
                     .Property(t => t.Importance)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ScoreFactors>()
                     .Property(t => t.RiskModelId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.ScoreFactors>().HasIndex(t => t.RiskModelId);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ssns>()
                     .ToTable("Ssns")
                     .HasKey(t => t.SsnId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ssns>()
                     .Property(t => t.SsnId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ssns>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ssns>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ssns>()
                     .Property(t => t.Number)
                     .HasMaxLength(9);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ssns>()
                     .Property(t => t.SsnIndicators)
                     .HasMaxLength(12);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Ssns>()
                     .Property(t => t.VariationIndicator)
                     .HasMaxLength(5);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Statements>()
                     .ToTable("Statements")
                     .HasKey(t => t.StatementId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Statements>()
                     .Property(t => t.StatementId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Statements>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Statements>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Statements>()
                     .Property(t => t.DateReported)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Statements>()
                     .Property(t => t.StatementText)
                     .HasMaxLength(500);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Statements>()
                     .Property(t => t.Type)
                     .HasMaxLength(4);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Summaries>()
                     .ToTable("Summaries")
                     .HasKey(t => t.SummariesId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Summaries>()
                     .Property(t => t.SummariesId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Summaries>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Summaries>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.Summaries>()
                     .Property(t => t.SummaryType)
                     .HasMaxLength(50);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .ToTable("TrendedTradeLines")
                     .HasKey(t => t.TrendedTradeLineId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.TrendedTradeLineId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.AccountNumber)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.AccountType)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Amount1)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Amount1Qualifier)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Amount2)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Amount2Qualifier)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.AmountBalloonPayment)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.AmountPastDue)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.BalanceAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.BalanceDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.BankruptcyChapterNumber)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.ConsumerComment)
                     .HasMaxLength(500);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.ConsumerDisputeFlag)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.DatePaymentDue)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Delinquencies30Days)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Delinquencies60Days)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Delinquencies90To180Days)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.DerogCounter)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Ecoa)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Evaluation)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Kob)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.LastPaymentDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.MaxDelinquencyDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.MonthlyPaymentAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.MonthlyPaymentType)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.MonthsHistory)
                     .HasMaxLength(4);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.OpenDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.OpenOrClosed)
                     .HasMaxLength(1);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.OriginalCreditorName)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.PaymentHistory)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.RevolvingOrInstallment)
                     .HasMaxLength(1);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.SoldToName)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.SpecialComment)
                     .HasMaxLength(500);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Status)
                     .HasMaxLength(3);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.StatusDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.SubscriberCode)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.SubscriberName)
                     .HasMaxLength(50);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .Property(t => t.Terms)
                     .HasMaxLength(5);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTradeLines>()
                     .HasMany<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>(p => p.TrendedTrades)
                     .WithOne(p => p.TrendedTradeLine)
                     .HasForeignKey(k => k.TrendedTradeLineId)
                     .IsRequired();

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>()
                     .ToTable("TrendedTrades")
                     .HasKey(t => t.TrendedTradesId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>()
                     .Property(t => t.TrendedTradesId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>()
                     .Property(t => t.ActualPaymentAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>()
                     .Property(t => t.BalanceAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>()
                     .Property(t => t.LastPaymentDate)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>()
                     .Property(t => t.MonthNumber)
                     .HasMaxLength(2);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>()
                     .Property(t => t.OriginalLoanAmountOrLimit)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>()
                     .Property(t => t.ScheduledPaymentAmount)
                     .HasMaxLength(10);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>()
                     .Property(t => t.TrendedTradeLineId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.TrendedTrades>().HasIndex(t => t.TrendedTradeLineId);

         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.UniqueConsumerIdentifiers>()
                     .ToTable("UniqueConsumerIdentifiers")
                     .HasKey(t => t.UniqueConsumerIdentifierId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.UniqueConsumerIdentifiers>()
                     .Property(t => t.UniqueConsumerIdentifierId)
                     .ValueGeneratedNever()
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.UniqueConsumerIdentifiers>()
                     .Property(t => t.CreditProfileId)
                     .IsRequired();
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.UniqueConsumerIdentifiers>().HasIndex(t => t.CreditProfileId);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.UniqueConsumerIdentifiers>()
                     .Property(t => t.Value)
                     .HasMaxLength(100);
         modelBuilder.Entity<global::Credit.API.Domain_RE.Models_RE.UniqueConsumerIdentifiers>()
                     .Property(t => t.VerificationIndicator)
                     .HasMaxLength(100);

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
